ticktext = c('text 1', 'text 2', 'text 3', 'text 4'))
)
)
fig
fig <- df %>% plot_ly(type = 'parcoords',
line = list(color = ~temp,
colorscale = list(c(0,'red'),c(0.5,'green'),c(1,'blue'))),
dimensions = list(
list(range = c(min(df[,9]), max(df[,9])),
label = 'hum', values = ~hum),
list(range = c(min(df[,10]), max(df[,10])),
label = 'windspeed', values = ~windspeed),
list(tickvals = c(1,2,4,5),
label = 'C', values = ~season,
ticktext = c('text 1', 'text 2', 'text 3', 'text 4'))
)
)
fig
test <- bike[,1]
test
str(test
)
level(c(1,2,3,4,4))
levels(c(1,2,3,4,4))
devtools::load_all(".")
plotParallelCoordinate(task, autoorder = FALSE)
devtools::load_all(".")
plotParallelCoordinate(task, autoorder = FALSE)
devtools::load_all(".")
plotParallelCoordinate(task, autoorder = FALSE)
devtools::load_all(".")
plotParallelCoordinate(task, autoorder = FALSE)
devtools::load_all(".")
plotParallelCoordinate(task, autoorder = FALSE)
devtools::load_all(".")
plotParallelCoordinate(task, autoorder = FALSE)
devtools::load_all(".")
devtools::load_all(".")
plotParallelCoordinate(task, autoorder = FALSE)
bike$season
as.numeric(bike$season)
devtools::load_all(".")
plotParallelCoordinate(task, autoorder = FALSE)
devtools::load_all(".")
plotParallelCoordinate(task, autoorder = TRUE)
plotParallelCoordinate(task, autoorder = TRUE, constrainrange = c(0.2,0))
plotParallelCoordinate(task, autoorder = TRUE, constrainrange = c(0.1,0))
plotParallelCoordinate(task, autoorder = TRUE, constrainrange = c(0.01,0))
plotParallelCoordinate(task, autoorder = TRUE, constrainrange = c(0.1,0))
plotParallelCoordinate(task, autoorder = TRUE, constrainrange = c(0.01,0))
plotParallelCoordinate(task, autoorder = TRUE, constrainrange = c(0.99,1))
plotParallelCoordinate(task, autoorder = FALSE, constrainrange = c(0.99,1))
str(bike)
levels(bike$season)
as.numeric(levels(bike$season))
devtools::load_all(".")
plotParallelCoordinate(task, autoorder = FALSE, constrainrange = c(0.99,1))
devtools::load_all(".")
plotParallelCoordinate(task, autoorder = FALSE, constrainrange = c(0.99,1))
is.numeric(as.integer(1))
devtools::load_all(".")
plotParallelCoordinate(task, autoorder = FALSE, constrainrange = c(0.99,1))
devtools::load_all(".")
plotParallelCoordinate(task, autoorder = FALSE, constrainrange = c(0.99,1))
fig <- df %>% plot_ly(type = 'parcoords',
line = list(color = ~temp,
colorscale = list(c(0,'red'),c(0.5,'green'),c(1,'blue'))),
dimensions = list(
list(range = c(min(df[,9]), max(df[,9])),
label = 'hum', values = ~hum),
list(range = c(min(df[,10]), max(df[,10])),
label = 'windspeed', values = ~windspeed),
list(tickvals = c(1,2,4,5),
label = 'C', values = ~season,
ticktext = c('text 1', 'text 2', 'text 3', 'text 4'), constraintrange = c(2,3))
)
)
fig
aa <- as.factor(c(1,2,3,4))
aa
range(aa)
devtools::load_all(".")
plotParallelCoordinate(task, autoorder = FALSE, constrainrange = c(0.99,1))
devtools::load_all(".")
plotParallelCoordinate(task, autoorder = FALSE, constrainrange = c(0.99,1))
plotParallelCoordinate(task, autoorder = FALSE, constrainrange = c(0.1,0))
plotParallelCoordinate(task, autoorder = FALSE, constrainrange = c(0.01,0))
plotParallelCoordinate(task, autoorder = FALSE, constrainrange = c(0.05,0))
View(bike)
bike$season
devtools::load_all(".")
plotParallelCoordinate(task, autoorder = FALSE, constrainrange = c(0.05,0))
devtools::load_all(".")
plotParallelCoordinate(task, autoorder = FALSE, constrainrange = c(0.05,0))
plotParallelCoordinate(task, autoorder = FALSE)
devtools::load_all(".")
plotParallelCoordinate(task, autoorder = FALSE)
devtools::load_all(".")
plotParallelCoordinate(task, autoorder = FALSE)
devtools::load_all(".")
plotParallelCoordinate(task, autoorder = FALSE)
devtools::load_all(".")
plotParallelCoordinate(task, autoorder = FALSE)
c("hallo"=1,"hallo2"=2)
bike$season
levels(bike$season)
as.factor(levels(bike$season))
tickvals <- as.numeric(as.factor(levels(bike$season)))
tickvals
devtools::load_all(".")
plotParallelCoordinate(task, autoorder = FALSE)
devtools::load_all(".")
plotParallelCoordinate(task, autoorder = FALSE)
devtools::load_all(".")
plotParallelCoordinate(task, autoorder = FALSE)
as.factor(levels(bike$season))
tickvals <- as.numeric(as.factor(levels(bike$season)))
ticktext <- as.factor(levels(bike$season))
tickvals
levels(bike$season)
levels(bike$month)
levels(bike$mnth)
levels(bike$holiday)
tickvals
devtools::load_all(".")
plotParallelCoordinate(task, autoorder = FALSE)
devtools::load_all(".")
plotParallelCoordinate(task, autoorder = FALSE)
plotParallelCoordinate(task, autoorder = FALSE, constrainrange = c(0,0.2))
plotParallelCoordinate(task, autoorder = FALSE, constrainrange = c(0,0.1))
plotParallelCoordinate(task, autoorder = FALSE, constrainrange = c(0,0.01))
plotParallelCoordinate(task, autoorder = FALSE, constrainrange = c(0,0.001))
plotParallelCoordinate(task, autoorder = FALSE, constrainrange = c(0,0.05))
plotParallelCoordinate(task, autoorder = FALSE, constrainrange = c(0,0.05))
devtools::load_all(".")
plotParallelCoordinate(task, autoorder = FALSE, constrainrange = c(0,0.05))
plotParallelCoordinate(task, autoorder = FALSE, constrainrange = c(0,0.005))
devtools::load_all(".")
plotParallelCoordinate(task, autoorder = FALSE, constrainrange = c(0,0.005))
plotParallelCoordinate(task, autoorder = FALSE, constrainrange = c(0,0.05))
devtools::load_all(".")
plotParallelCoordinate(task, autoorder = FALSE, constrainrange = c(0,0.05))
devtools::load_all(".")
plotParallelCoordinate(task, autoorder = FALSE, constrainrange = c(0,0.05))
devtools::load_all(".")
plotParallelCoordinate(task, autoorder = FALSE, constrainrange = c(0,0.05))
devtools::load_all(".")
plotParallelCoordinate(task, autoorder = FALSE, constrainrange = c(0,0.05))
droplevels()
devtools::load_all(".")
plotParallelCoordinate(task, autoorder = FALSE, constrainrange = c(0,0.05))
devtools::load_all(".")
plotParallelCoordinate(task, autoorder = FALSE, constrainrange = c(0,0.05))
devtools::load_all(".")
plotParallelCoordinate(task, autoorder = FALSE, constrainrange = c(0,0.05))
devtools::load_all(".")
plotParallelCoordinate(task, autoorder = FALSE, constrainrange = c(0,0.05))
devtools::load_all(".")
plotParallelCoordinate(task, autoorder = FALSE, constrainrange = c(0,0.05))
devtools::load_all(".")
plotParallelCoordinate(task, autoorder = FALSE, constrainrange = c(0,0.05))
devtools::load_all(".")
plotParallelCoordinate(task, autoorder = FALSE, constrainrange = c(0,0.05))
devtools::load_all(".")
plotParallelCoordinate(task, autoorder = FALSE, constrainrange = c(0,0.05))
devtools::load_all(".")
plotParallelCoordinate(task, autoorder = FALSE, constrainrange = c(0,0.05))
devtools::load_all(".")
plotParallelCoordinate(task, autoorder = FALSE, constrainrange = c(0,0.05))
devtools::load_all(".")
plotParallelCoordinate(task, autoorder = FALSE, constrainrange = c(0,0.05))
devtools::load_all(".")
plotParallelCoordinate(task, autoorder = FALSE, constrainrange = c(0,0.05))
devtools::load_all(".")
devtools::load_all(".")
plotParallelCoordinate(task, autoorder = FALSE, constrainrange = c(0,0.05))
devtools::load_all(".")
plotParallelCoordinate(task, autoorder = FALSE, constrainrange = c(0,0.05))
plotParallelCoordinate(task, autoorder = FALSE, constrainrange = c(0,0.05))
droplevels(bike[,1])
levels(droplevels(bike[,1]))
devtools::load_all(".")
plotParallelCoordinate(task, autoorder = FALSE, constrainrange = c(0,0.05))
devtools::load_all(".")
plotParallelCoordinate(task, autoorder = FALSE, constrainrange = c(0,0.05))
devtools::load_all(".")
plotParallelCoordinate(task, autoorder = FALSE, constrainrange = c(0,0.05))
devtools::load_all(".")
plotParallelCoordinate(task, autoorder = FALSE, constrainrange = c(0,0.05))
devtools::load_all(".")
plotParallelCoordinate(task, autoorder = FALSE, constrainrange = c(0,0.05))
devtools::load_all(".")
devtools::load_all(".")
plotParallelCoordinate(task, autoorder = FALSE, constrainrange = c(0,0.05))
devtools::load_all(".")
plotParallelCoordinate(task, autoorder = FALSE, constrainrange = c(0,0.05))
plotParallelCoordinate(task, autoorder = FALSE, constrainrange = c(0,0.05))
devtools::load_all(".")
plotParallelCoordinate(task, autoorder = FALSE, constrainrange = c(0.95,1))
plotParallelCoordinate(task, autoorder = FALSE, constrainrange = c(0.95,1))
plotParallelCoordinate(task, autoorder = FALSE, constrainrange = c(0.6,0.8))
plotParallelCoordinate(task, autoorder = FALSE, constrainrange = c(0.5,0.6))
plotParallelCoordinate(task, autoorder = FALSE, constrainrange = c(0.5,0.55))
plotParallelCoordinate(task, autoorder = FALSE, constrainrange = c(0.5,0.52))
plotParallelCoordinate(task, autoorder = FALSE, constrainrange = c(0.51,0.52))
plotParallelCoordinate(task, autoorder = TRUE, constrainrange = c(0.51,0.52))
plotParallelCoordinate(task, autoorder = TRUE)
plotParallelCoordinate(task, autoorder = TRUE)
devtools::load_all(".")
plotParallelCoordinate(task, autoorder = TRUE)
plotParallelCoordinate(task, autoorder = TRUE)
?corReorder
devtools::load_all(".")
plotParallelCoordinate(task, autoorder = TRUE)
devtools::load_all(".")
plotParallelCoordinate(task, autoorder = TRUE)
devtools::load_all(".")
devtools::load_all(".")
plotParallelCoordinate(task, autoorder = TRUE)
devtools::load_all(".")
plotParallelCoordinate(task, autoorder = TRUE)
devtools::load_all(".")
plotParallelCoordinate(task, autoorder = FALSE)
plotParallelCoordinate(task, autoorder = TRUE)
devtools::load_all(".")
plotParallelCoordinate(task, autoorder = TRUE)
bike$season
as.numeric(bike$season)
as.character(bike$season)
as.factor(as.character(bike$season))
bike$season
as.factor(as.character(bike$season))
devtools::load_all(".")
plotParallelCoordinate(task, autoorder = TRUE)
devtools::load_all(".")
plotParallelCoordinate(task, autoorder = TRUE)
devtools::load_all(".")
plotParallelCoordinate(task, autoorder = TRUE)
devtools::load_all(".")
plotParallelCoordinate(task, autoorder = TRUE)
devtools::load_all(".")
plotParallelCoordinate(task, autoorder = TRUE)
devtools::load_all(".")
plotParallelCoordinate(task, autoorder = TRUE)
devtools::load_all(".")
plotParallelCoordinate(task, autoorder = TRUE)
devtools::load_all(".")
plotParallelCoordinate(task, autoorder = TRUE)
devtools::load_all(".")
plotParallelCoordinate(task, autoorder = TRUE)
load("D:/Simon/Desktop/Studium/6. Semester/Bachelorarbeit/Data/cervical.RData")
View(cervical)
str(cervical)
str(bike)
View(bike)
View(cervical)
bike$season
View(bike)
str(bike)
factor(bike$season)
str(bike)
levels(bike)
levels(bike$season)
nlevels(bike$season)
str(nlevels(bike$season))
as.numeric(bike$season)
devtools::load_all(".")
plotParallelCoordinate(task, autoorder = TRUE)
bike <- as.character(bike)
load("D:/Simon/Desktop/Studium/6. Semester/Bachelorarbeit/Data/bike.RData")
bike1[] <- lapply(bike, as.character())
bike1[] <- lapply(bike, as.character)
bike[] <- lapply(bike, as.character)
str(bike)
load("D:/Simon/Desktop/Studium/6. Semester/Bachelorarbeit/Data/bike.RData")
bike$season <- as.character(bike$season)
str(bike)
task = TaskRegr$new(id = "bike", backend = bike, target = "temp")
plotParallelCoordinate(task)
bike$mnth <- as.character(bike$mnth)
task = TaskRegr$new(id = "bike", backend = bike, target = "temp")
plotParallelCoordinate(task)
bike$days_since_2011 <- as.character(bike$days_since_2011)
task = TaskRegr$new(id = "bike", backend = bike, target = "temp")
plotParallelCoordinate(task)
ggplot(data, aes(x = s, y = alpha, z = logloss)) +
geom_tile(stat = "summary_2d", fun = mean, bins = gridsize) +
labs(title = "Heatmap",
fill = "logloss")+
geom_rug(alpha = 0.2, sides = "bl",
position = position_jitter(width = 0.07, height = 0.07))
devtools::load_all(".")
plotHeatmap(task, c(alpha, s)
plotHeatmap(task, c(alpha, s))
plotHeatmap(task, c(alpha, s))
plotHeatmap(task, c("alpha", "s"))
plotHeatmap(task, c(alpha, s))
#retrieve the target and features variables which are stored inside the task
df <- as.data.frame(task$data())
target <- task$target_names
features <- task$feature_names
#transform the df object into a vector
target_vector <-  df[[target]]
features
target_vector
features <- task$feature_names
#transform the df object into a vector
features_vector <-  df[[features]]
#transform the df object into a vector
features_vector <-  df[[features]][1]
#transform the df object into a vector
features_vector <-  df[[features[1]]]
features_vector
plotHeatmap <- function(task, features, gridsize = 20) {
#aufpassen auf unterschiedlichen datainput (kategorial, numerisch)
library(ggplot2)
features <- task$feature_names
#transform the df object into a vector
f <-  df[[features[1]]]
f2 <- df[[features[2]]]
ggplot(data, aes(x = f, y = f2, z = logloss)) +
geom_tile(stat = "summary_2d", fun = mean, bins = gridsize) +
labs(title = "Heatmap",
fill = "logloss")+
geom_rug(alpha = 0.2, sides = "bl",
position = position_jitter(width = 0.07, height = 0.07))
}
plotHeatmap(task, c(alpha, s))
plotHeatmap(task, c("alpha", "s"))
features
#transform the df object into a vector
f <-  df[[features[1]]]
f
f2 <- df[[features[2]]]
f2
features
target <- task$target_names
devtools::load_all(".")
plotHeatmap(task, c("alpha", "s"))
devtools::load_all(".")
plotHeatmap(task, c("alpha", "s"))
target <- task$target_names
t <-  df[[target]]
t
f2
ggplot(data, aes(x = f, y = f2, z = t)) +
geom_tile(stat = "summary_2d", fun = mean, bins = gridsize) +
labs(title = "Heatmap",
fill = "logloss")+
geom_rug(alpha = 0.2, sides = "bl",
position = position_jitter(width = 0.07, height = 0.07))
gridsize = 20
ggplot(data, aes(x = f, y = f2, z = t)) +
geom_tile(stat = "summary_2d", fun = mean, bins = gridsize) +
labs(title = "Heatmap",
fill = "logloss")+
geom_rug(alpha = 0.2, sides = "bl",
position = position_jitter(width = 0.07, height = 0.07))
devtools::load_all(".")
plotHeatmap(task, c("alpha", "s"))
df <- task$data()
df
ggplot(df, aes(x = f, y = f2, z = t)) +
geom_tile(stat = "summary_2d", fun = mean, bins = gridsize) +
labs(title = "Heatmap",
fill = "logloss")+
geom_rug(alpha = 0.2, sides = "bl",
position = position_jitter(width = 0.07, height = 0.07))
plotHeatmap(task, c("mnth", "season"))
plotHeatmap(task, c("mnth", "season"))
features <- task$feature_names
target <- task$target_names
features
target
df <- task$data()
df
#transform the df object into a vector
f <-  df[[features[1]]]
f
f2 <- df[[features[2]]]
t <-  df[[target]]
ggplot(df, aes(x = f, y = f2, z = t)) +
geom_tile(stat = "summary_2d", fun = mean, bins = gridsize) +
labs(title = "Heatmap",
fill = "logloss")+
geom_rug(alpha = 0.2, sides = "bl",
position = position_jitter(width = 0.07, height = 0.07))
features
feature <- c("mnth", "season")
features2 <- task$feature_names
target <- task$target_names
df <- task$data()
#transform the df object into a vector
f <-  df[[features[1]]]
f2 <- df[[features[2]]]
t <-  df[[target]]
f
target_ordered <- target_vector[order(target_vector, decreasing = FALSE)]
index <- round(length(target_ordered)*constrainrange)
target_subset <- target_ordered[min(index):max(index)]
targetindex <- match(target,names(df))
feature <- c("mnth", "season")
features2 <- task$feature_names
target <- task$target_names
df <- task$data()
#transform the df object into a vector
f <-  df[[features["mnth"]]]
f
#transform the df object into a vector
f <-  df[["mnth"]
f2 <- df[[features[2]]]
t <-  df[[target]]
ggplot(df, aes(x = f, y = f2, z = t)) +
geom_tile(stat = "summary_2d", fun = mean, bins = gridsize) +
labs(title = "Heatmap",
fill = "logloss")+
geom_rug(alpha = 0.2, sides = "bl",
position = position_jitter(width = 0.07, height = 0.07))
}
#transform the df object into a vector
f <-  df["mnth"]
#transform the df object into a vector
f <-  df[,"mnth"]
#transform the df object into a vector
f <-  df[,feature[1]]
f
f2 <- df[,"season"]
feature[1]
#transform the df object into a vector
f <-  df[,c(feature[1])]
#transform the df object into a vector
f <- df[[feature[1]]]
#transform the df object into a vector
f <- df[[feature[1]]]
f2 <- df[[feature[2]]]
t <-  df[[target]]
ggplot(df, aes(x = f, y = f2, z = t)) +
geom_tile(stat = "summary_2d", fun = mean, bins = gridsize) +
labs(title = "Heatmap",
fill = "logloss")+
geom_rug(alpha = 0.2, sides = "bl",
position = position_jitter(width = 0.07, height = 0.07))
devtools::load_all(".")
plotHeatmap(task, c("mnth", "season"))
task <- task
feature <- c("mnth", "season")
features2 <- task$feature_names
target <- task$target_names
df <- task$data()
#transform the df object into a vector
f <- df[[feature[1]]]
f2 <- df[[feature[2]]]
t <-  df[[target]]
ggplot(df, aes(x = f, y = f2, z = t)) +
geom_tile(stat = "summary_2d", fun = mean, bins = gridsize) +
labs(title = "Heatmap",
fill = "logloss")+
geom_rug(alpha = 0.2, sides = "bl",
position = position_jitter(width = 0.07, height = 0.07))
df <- task$data()
rm(plotHeatmap())
rm(plotHeatmap)
devtools::load_all(".")
plotHeatmap(task, c("mnth", "season"))
df[target]
df
df[[target]]
#perpare data
glmnet_ela <- readRDS("D:/Simon/Desktop/Studium/6. Semester/Bachelorarbeit/data/glmnet_ela.rds")
#data = subset(glmnet_ela, dataset == "kc1")
data = glmnet_ela[glmnet_ela$dataset == "kc1",]
data = data[, 1:3]
quantile(data, probs = 0.9)
quantile(data$alpha, probs = 0.9)
data
data$alpha <- data[alpha < quantile(data$alpha, probs = 0.9)]
data$alpha <- data[data$alpha < quantile(data$alpha, probs = 0.9)]
data$alpha <- data$alpha < quantile(data$alpha, probs = 0.9)
data$alpha, probs = 0.9
quantile(data$alpha, probs = 0.9)
quantile(data$alpha, probs = 0.9)
glmnet_ela <- readRDS("D:/Simon/Desktop/Studium/6. Semester/Bachelorarbeit/data/glmnet_ela.rds")
#data = subset(glmnet_ela, dataset == "kc1")
data = glmnet_ela[glmnet_ela$dataset == "kc1",]
data = data[, 1:3]
quantile(data$alpha, probs = 0.9)
data$alpha < quantile(data$alpha, probs = 0.9)
data$alpha <- data$alpha[data$alpha < quantile(data$alpha, probs = 0.9)]
data$alpha <- data$alpha[-data$alpha < quantile(data$alpha, probs = 0.9)]
data$alpha
quantile(data$alpha, probs = 0.9)
data$alpha <- data$alpha[-(data$alpha < quantile(data$alpha, probs = 0.9))]
data$alpha < quantile(data$alpha, probs = 0.9)
data$alpha <- data$alpha[!(data$alpha < quantile(data$alpha, probs = 0.9)),]
data$alpha
quantile(data$alpha, probs = 0.9)
data1 <- data[!(data$alpha < quantile(data$alpha, probs = 0.9)),]
data1 <- data[!(data$alpha >= quantile(data$alpha, probs = 0.9)),]
data1
data <- data[!(data$alpha >= quantile(data$alpha, probs = 0.9)),]
data
#create task to save Feature and Target Variable
task = TaskRegr$new(id = "task_glmnet", backend = data, target = "logloss")
learner = lrn("regr.ranger")
plotPartialDependence(task, learner)
plotPartialDependence(task, learner, c("alpha"))
plotPartialDependence(task, learner, c("s"))
data <- data[!(data$s >= quantile(data$s, probs = 0.9)),]
data
#create task to save Feature and Target Variable
task = TaskRegr$new(id = "task_glmnet", backend = data, target = "logloss")
plotPartialDependence(task, learner, c("s"))

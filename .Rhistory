task$missings()
po = po("imputehist") %>>% po("fixfactors") %>>%  po("imputeoor", affect_columns = selector_type(c("factor", "ordered", "character", "logical"))) %>>% po("removeconstants")
task = po$train(task)[[1]]
task$missings()
po = po("imputehist") %>>% po("fixfactors") %>>%  po("imputeoor", affect_columns = selector_type(c("logical","factor", "ordered", "character"))) %>>% po("removeconstants")
task = po$train(task)[[1]]
task$missings()
# set seed for reproducibility
mlr_reflections$task_feature_types
str(iaml_super_reduced)
task = TaskRegr$new(id = "task_glmnet", backend = iaml_super_reduced, target = "logloss")
task$data()
task$missings()
po = po("imputehist") %>>% po("fixfactors") %>>%  po("imputeoor", affect_columns = selector_type(c("logical"))) %>>% po("removeconstants")
task = po$train(task)[[1]]
task$missings()
# set seed for reproducibility
mlr_reflections$task_feature_types
str(iaml_super_reduced)
task$missings()
po = po("imputehist") %>>% po("fixfactors") %>>%  po("imputeoor", affect_columns = selector_type(c("log"))) %>>% po("removeconstants")
po = po("imputehist") %>>% po("fixfactors") %>>%  po("imputeoor", affect_columns = selector_type(c("logical"))) %>>% po("removeconstants")
task = po$train(task)[[1]]
task$missings()
po = po("imputehist") %>>% po("fixfactors") %>>%  po("imputeoor", affect_columns = selector_all() %>>% po("removeconstants")
po = po("imputehist") %>>% po("fixfactors") %>>%  po("imputeoor", affect_columns = selector_all()) %>>% po("removeconstants")
task = po$train(task)[[1]]
task$missings()
po = po("imputehist") %>>% po("fixfactors") %>>%  po("imputeoor", affect_columns = selector_all()) %>>% po("removeconstants")
task = po$train(task)[[1]]
task$missings()
task$data()
# set seed for reproducibility
mlr_reflections$task_feature_types
str(iaml_super_reduced)
task = TaskRegr$new(id = "task_glmnet", backend = iaml_super_reduced, target = "logloss")
task$data()
task$missings()
po = po("imputehist") %>>% po("fixfactors") %>>%  po("imputeoor", affect_columns = selector_all()) %>>% po("removeconstants")
task = po$train(task)[[1]]
task$missings()
task$data()
po = po("imputehist") %>>%  po("imputeoor" %>>% po("fixfactors") %>>% po("removeconstants")
po = po("imputehist") %>>%  po("imputeoor") %>>% po("fixfactors") %>>% po("removeconstants")
task = po$train(task)[[1]]
task$missings()
task$data()
task$missings()
po = po("imputehist") %>>%  po("imputeoor") %>>% po("fixfactors") %>>% po("removeconstants")
task = po$train(task)[[1]]
task$missings()
task$data()
po = po("imputehist") %>>%  po("imputeoor") %>>% po("fixfactors", droplevels) %>>% po("removeconstants")
task = po$train(task)[[1]]
# set seed for reproducibility
mlr_reflections$task_feature_types
str(iaml_super_reduced)
task = TaskRegr$new(id = "task_glmnet", backend = iaml_super_reduced, target = "logloss")
task$data()
task$missings()
po = po("imputehist") %>>%  po("imputeoor") %>>% po("fixfactors", droplevels = TRUE) %>>% po("removeconstants")
task = po$train(task)[[1]]
task$missings()
task$data()
po = po("imputehist") %>>%  po("imputeoor") %>>% po("fixfactors", droplevels = FALSE) %>>% po("removeconstants")
task = po$train(task)[[1]]
task$missings()
task$data()
po = po("imputehist") %>>%  po("imputeoor") %>>% po("fixfactors", droplevels = FALSE) %>>% po("removeconstants") %>>% po("imputesample", selector_type("logical"))
po = po("imputehist") %>>%  po("imputeoor") %>>% po("fixfactors", droplevels = FALSE) %>>% po("removeconstants") %>>% po("imputesample", affect_columns = selector_type("logcal"))
po = po("imputehist") %>>%  po("imputeoor") %>>% po("fixfactors", droplevels = FALSE) %>>% po("removeconstants") %>>% po("imputesample", affect_columns = selector_type("logical"))
task = po$train(task)[[1]]
task$missings()
shiny::runApp('inst/VisHypShiny')
runApp('inst/VisHypShiny')
library(VisHyp)
runApp()
smashy_super <- readRDS("D:/Simon/Desktop/Studium/6. Semester/Bachelorarbeit/package_VisHyp/data/smashy_super.rds")
View(smashy_super)
library(VisHyp)
smashy_super <- readRDS("D:/Simon/Desktop/Studium/6. Semester/Bachelorarbeit/package_VisHyp/data/smashy_super.rds")
setwd("D:/Simon/Desktop/Studium/6. Semester/Bachelorarbeit/package_VisHyp/data")
save(smashy_super, file = "smashy_super.RData")
save(smashy_super, file = "smashy_super.rda")
library(VisHyp)
runApp('D:/Simon/Desktop/Studium/6. Semester/Bachelorarbeit/package_VisHyp/inst/VisHypShiny')
library(VisHyp)
runApp('D:/Simon/Desktop/Studium/6. Semester/Bachelorarbeit/package_VisHyp/inst/VisHypShiny')
library(VisHyp)
runApp()
load("D:/Simon/Desktop/Studium/6. Semester/Bachelorarbeit/package_VisHyp/data/smashy_super.rda")
smashy_super[,"budget_log_step"][[1]]
is.numeric(smashy_super[,"budget_log_step"][[1]])
test <- budget_log_step
test <- "budget_log_step"
is.numeric(smashy_super[,test][[1]])
library(VisHyp)
runApp()
min(1,2,3,4)
min("1","2","3","4")
2 > "1"
("1","2","3","4")[2]
("1","2","3","4")[2]
c("1","2","3","4")[2]
library(VisHyp)
runApp()
?checkboxGroupInput
runApp()
runApp()
runApp()
runApp()
runApp()
library(VisHyp)
?VisHyp
?ggplot2
library(VisHyp)
?VisHyp
?VisHyp
library(VisHyp)
?VisHyp
library(VisHyp)
?VisHyp
library(VisHyp)
?VisHyp
usethis::use_data_raw()
get_exclude_patterns()
usethis::use_build_ignore("data-raw")
devtools::load_all(".")
usethis::use_build_ignore("Analyses")
library(mlr3)
data(glmnet_ela)
task_glmnet_ela = TaskRegr$new(id = "task_glmnet", backend = glmnet_ela, target = "logloss")
plotImportance(task_glmnet_ela)
plotPartialDependence(task_glmnet_ela)
plotHeatmap(task_glmnet_ela)
library(VisHyp)
plotHeatmap(task_glmnet_ela)
plotImportance(task_glmnet_ela)
learner = lrn("regr.ranger", num.trees = 100)
devtools::load_all(".")
library(VisHyp)
library(VisHyp)
warnings()
plotImportance(task_glmnet_ela)
library(mlr3)
data(glmnet_ela)
task_glmnet_ela = TaskRegr$new(id = "task_glmnet", backend = glmnet_ela, target = "logloss")
plotImportance(task_glmnet_ela)
library(VisHyp)
launchVisHyp()
library(VisHyp)
launchVisHyp()
launchVisHyp()
shiny::runApp(appDir, display.mode = 'normal')
launchVisHyp()
library(VisHyp)
launchVisHyp()
launchVisHyp()
data.frame("hallo" = c(1,2,3))
data.frame("hallo" = c(1,2,3), "tschüss" = c(4,3,2), "hallo" = c(3,2,1))
test <- data.frame("hallo" = c(1,2,3), "tschüss" = c(4,3,2), "hallo" = c(3,2,1))
names(test)
View(test)
test <- data.frame("hallo_213" = c(1,2,3), "tschüss" = c(4,3,2), "hallo_213" = c(3,2,1))
names(test)
unique(names(test))
unique(c(1,2,3))
unique(c(1,2,3,3))
all.equal(names(test))
duplicate(c(1,2,3,3))
duplicated(c(1,2,3,3))
c(1,2,3,3,4,5)
test <- c(1,2,3,3,4,3,5)
dubplicated(test)
test[duplicated(test)]
make.unique(test)
test <- c("hallo","schüss","haööl","hallo","nö","hallo")
make.unique(test)
test1 <- make.unique(test)
names(test) <- test1
names(test) <- test
test
names(test) <- test1
test
library(VisHyp)
launchVisHyp()
launchVisHyp()
library(VisHyp)
launchVisHyp()
devtools::load_all(".")
library(VisHyp)
launchVisHyp()
names(test)
test(1,2,3) <- c("logloss", "sad",     "sad.1")
test(1,2,3) <- c("logloss", "sad",     "sad.1")
test <- c(1,2,3)
names(test) <- c("logloss", "sad",     "sad.1")
names(test) <- c("logloss", "sad",     "sad.1")[c("logloss")]
names(test) <- c("logloss", "sad",     "sad.1")
test
names(test)["logloss"]
names(test)[c(1,2)]
sum(c(1,2,3))
count(c(1,2,3))
library(VisHyp)
launchVisHyp()
library(VisHyp)
launchVisHyp()
library(VisHyp)
launchVisHyp()
library(VisHyp)
launchVisHyp()
launchVisHyp()
library(VisHyp)
launchVisHyp()
library(VisHyp)
launchVisHyp()
launchVisHyp()
launchVisHyp()
library(VisHyp)
launchVisHyp()
library(VisHyp)
launchVisHyp()
launchVisHyp()
launchVisHyp()
launchVisHyp()
library(VisHyp)
launchVisHyp()
library(VisHyp)
launchVisHyp()
launchVisHyp()
launchVisHyp()
launchVisHyp()
launchVisHyp()
launchVisHyp()
launchVisHyp()
launchVisHyp()
launchVisHyp()
library(VisHyp)
library(VisHyp)
launchVisHyp()
library(VisHyp)
launchVisHyp()
launchVisHyp()
library(VisHyp)
launchVisHyp()
library(VisHyp)
launchVisHyp()
library(VisHyp)
launchVisHyp()
library(VisHyp)
launchVisHyp()
library(VisHyp)
launchVisHyp()
library(VisHyp)
launchVisHyp()
launchVisHyp()
library(VisHyp)
launchVisHyp()
test <- data.frame(c(1,2,3),c(1,1,1),c(1,2,2))
Filter(function(test)(length(unique(test))>1), test)
names(test) <- c("hallo","ich","bims")
test
Filter(function(test)(length(unique(test))>1), test)
Filter(function(x)(length(unique(x))>1), test)
library(VisHyp)
launchVisHyp()
library(VisHyp)
launchVisHyp()
library(VisHyp)
c(1,2,3) %in% 2
launchVisHyp()
library(VisHyp)
library(VisHyp)
launchVisHyp()
library(VisHyp)
launchVisHyp()
launchVisHyp()
library(VisHyp)
library(VisHyp)
launchVisHyp()
launchVisHyp()
iaml_super_reduced <- readRDS("D:/Simon/Desktop/Studium/6. Semester/Bachelorarbeit/Data/iaml_super_reduced.rds")
task = TaskRegr$new(id = "task_glmnet", backend = iaml_super_reduced, target = "logloss")
View(iaml_super_reduced)
iaml_super_reduced <- iaml_super_reduced$task_id[iaml_super_reduced$task_id == 1067]
iaml_super_reduced <- iaml_super_reduced[iaml_super_reduced$task_id == 1067]
iaml_super_reduced <- readRDS("D:/Simon/Desktop/Studium/6. Semester/Bachelorarbeit/Data/iaml_super_reduced.rds")
iaml_super_reduced <- iaml_super_reduced[iaml_super_reduced$task_id == 1067]
iaml_super_reduced$task_id == 1067
iaml_super_reduced <- iaml_super_reduced[iaml_super_reduced$task_id == 1067,]
task = TaskRegr$new(id = "task_glmnet", backend = iaml_super_reduced, target = "logloss")
plotPartialDependence(task)
plotParallelCoordinate(task)
plotParallelCoordinate(task, autosort = FALSE)
plotParallelCoordinate(task, autosort = true, labelangle = 15)
plotParallelCoordinate(task, autosort = true, labelangle = 15)
plotParallelCoordinate(task, autosort = FALSE, labelangle = 15)
plotParallelCoordinate(task, autosort = t, labelangle = 15)
plotParallelCoordinate(task, autosort = TRUE, labelangle = 15)
library(VisHyp)
iaml_super_reduced <- readRDS("D:/Simon/Desktop/Studium/6. Semester/Bachelorarbeit/Data/iaml_super_reduced.rds")
iaml_super_reduced <- iaml_super_reduced[iaml_super_reduced$task_id == 1067,]
task = TaskRegr$new(id = "task_glmnet", backend = iaml_super_reduced, target = "logloss")
plotParallelCoordinate(task)
plotParallelCoordinate(task, labelangle = 15)
launchVisHyp()
plotParallelCoordinate(task, labelangle = 15, features = c("task_id","learner"))
library(VisHyp)
launchVisHyp()
launchVisHyp()
c(1,2,3)[c(1,2)]
library(VisHyp)
launchVisHyp()
library(VisHyp)
launchVisHyp()
library(VisHyp)
launchVisHyp()
library(VisHyp)
launchVisHyp()
launchVisHyp()
library(VisHyp)
launchVisHyp()
iaml_super_reduced <- readRDS("D:/Simon/Desktop/Studium/6. Semester/Bachelorarbeit/Data/iaml_super_reduced.rds")
iaml_super_reduced <- iaml_super_reduced[iaml_super_reduced$task_id == 1067,]
task = TaskRegr$new(id = "task_glmnet", backend = iaml_super_reduced, target = "logloss")
plotParallelCoordinate(task, labelangle = 15, features = c("task_id","learner"))
plotParallelCoordinate(task, labelangle = 15, features = c("trainsize","learner"))
target = "logloss"
featureImputed <- names(Filter(function(x)(length(unique(x))>1), iaml_super_reduced))
featureImputed <- featureImputed[!featureImputed %in% target]
plotParallelCoordinate(task, labelangle = 15)
featureImputed
task$feature_names
launchVisHyp()
iaml_super_reduced <- readRDS("D:/Simon/Desktop/Studium/6. Semester/Bachelorarbeit/Data/iaml_super_reduced.rds")
iaml_super_reduced <- iaml_super_reduced[iaml_super_reduced$task_id == 1067,]
task = TaskRegr$new(id = "task_glmnet", backend = iaml_super_reduced, target = "logloss")
task$feature_names
plotParallelCoordinate(task, labelangle = 15, features = c("trainsize","learner"))
target = "logloss"
featureImputed <- names(Filter(function(x)(length(unique(x))>1), iaml_super_reduced))
featureImputed <- featureImputed[!featureImputed %in% target]
plotParallelCoordinate(task, labelangle = 15)
featureImputed
task$target_names
launchVisHyp()
launchVisHyp()
View(hyperparam)
n
n
n
n
n
n
n
n
n
n
n
n
n
iaml_super_reduced <- readRDS("D:/Simon/Desktop/Studium/6. Semester/Bachelorarbeit/Data/iaml_super_reduced.rds")
Q
View(iaml_super_reduced)
str(iaml_super_reduced)
launchVisHyp()
n
n
n
n
n
c
Q
launchVisHyp()
n
n
n
f
f
f
c
Q
launchVisHyp()
f
f
f
f
f
Q
launchVisHyp()
f
n
n
Q
launchVisHyp()
n
launchVisHyp()
launchVisHyp()
launchVisHyp()
n
Q
launchVisHyp()
View(iaml_super_reduced)
task$feature_names
task$data()
str(as.data.frame(Task_properties$task$data(), stringsAsFactors = TRUE))
str(as.data.frame(task$data(), stringsAsFactors = TRUE))
launchVisHyp()
launchVisHyp()
plotParallelCoordinate(task, labelangle = 15, features = c("trainsize","learner"),labelside = FALSE)
plotParallelCoordinate(task, labelangle = 15, features = c("trainsize","learner"),labelside = Top)
plotParallelCoordinate(task, labelangle = 15, features = c("trainsize","learner"),labelside = "Top")
plotParallelCoordinate(task, labelangle = 15, features = c("trainsize","learner"),colbarrange = TRUE)
plotParallelCoordinate(task, labelangle = 15, features = c("trainsize","learner"),autosort = FALSE)
plotParallelCoordinate(task, labelangle = 15, features = c("trainsize","learner"),autosort = TRUE)
plotParallelCoordinate(task, labelangle = 15, features = c("trainsize","learner"),colbarreverse = TRUE)
iaml_super_reduced <- readRDS("D:/Simon/Desktop/Studium/6. Semester/Bachelorarbeit/Data/iaml_super_reduced.rds")
iaml_super_reduced <- iaml_super_reduced[iaml_super_reduced$task_id == 1067,]
str(iaml_super_reduced)
task = TaskRegr$new(id = "task_glmnet", backend = iaml_super_reduced, target = "logloss")
task$feature_names
task$target_names
str(as.data.frame(task$data(), stringsAsFactors = TRUE))
plotParallelCoordinate(task, labelangle = 15, features = c("trainsize","learner"),colbarreverse = TRUE)
iaml_super_reduced <- readRDS("D:/Simon/Desktop/Studium/6. Semester/Bachelorarbeit/Data/iaml_super_reduced.rds")
iaml_super_reduced <- iaml_super_reduced[iaml_super_reduced$task_id == 1067,]
str(iaml_super_reduced)
task = TaskRegr$new(id = "task_glmnet", backend = iaml_super_reduced, target = "logloss")
iaml_super_reduced <- iaml_super_reduced[iaml_super_reduced$task_id == 1067,]
str(iaml_super_reduced)
task = TaskRegr$new(id = "task_glmnet", backend = iaml_super_reduced, target = "logloss")
task = TaskRegr$new(id = "task_glmnet", backend = iaml_super_reduced, target = "logloss")
task$feature_names
task$target_names
str(as.data.frame(task$data(), stringsAsFactors = TRUE))
plotParallelCoordinate(task, labelangle = 15,colbarreverse = TRUE)
launchVisHyp()
launchVisHyp()
launchVisHyp()
launchVisHyp()
plotParallelCoordinate(task, labelangle = 15,colbarreverse = TRUE)
launchVisHyp()
launchVisHyp()
launchVisHyp()
launchVisHyp()
launchVisHyp()
str(iaml_super_reduced)
launchVisHyp()
launchVisHyp()
iaml_super_reduced <- readRDS("D:/Simon/Desktop/Studium/6. Semester/Bachelorarbeit/Data/iaml_super_reduced.rds")
iaml_super_reduced <- iaml_super_reduced[iaml_super_reduced$task_id == 1067,]
str(iaml_super_reduced)
task = TaskRegr$new(id = "task_glmnet", backend = iaml_super_reduced, target = "logloss")
task$feature_names
plotParallelCoordinate(task, labelangle = 15,colbarreverse = TRUE)
launchVisHyp()
View(iaml_super_reduced)
length(unique(c(1,NA,1)))
?unique
test <- c()
test[2] <- "htest"
test
launchVisHyp()
test
names(Filter(function(x)(length(unique(x))>2), test)
names(Filter(function(x)(length(unique(x))>2), test))
length(unique(x)) > 2), test
length(unique(test)) > 2)
length(unique(test)) > 2
length(unique(test)) > 1
test <- c(1,23,1,2)
names(Filter(function(x)(length(unique(x))>2), test))
test <- data.frame("hallo"=c(1,2,3),"wie"=c(1,2,3),"geht" = c(1,2,4))
names(Filter(function(x)(length(unique(x))>2), test))
test <- data.frame("hallo"=c(1,2,3),"wie"=c(1,2,3),"geht" = c(1,2,2))
names(Filter(function(x)(length(unique(x))>2), test))
test
names(test)[!test %in% "hallo"]
names(test)[!names(test) %in% "hallo"]
launchVisHyp()
is.numeric(test[,1])
names(Filter(function(x)(length(unique(x))>2), test[,1]))
test[,1]
length(unique(c(1,2,2)))
length(unique(c(1,2,2,3)))
names(test[1])
launchVisHyp()
names(test[1])
launchVisHyp()
launchVisHyp()
launchVisHyp()
launchVisHyp()
launchVisHyp()
launchVisHyp()
launchVisHyp()
library(VisHyp)
library(mlr3)
# A task needs to be created
task = TaskRegr$new(id = "task_glmnet", backend = glmnet_ela, target = "logloss")
plotImportance(task)
warnings()
suppressWarnings(importancePlot(task))
library(VisHyp)
suppressWarnings(importancePlot(task))
suppressWarnings(plotImportance(task))
library(VisHyp)
plotImportance(task)
suppressWarnings(plotImportance(task))
library(VisHyp)
plotImportance(task)
library(VisHyp)

for (i in 1:n) {
if(is.logical(df[,i]))
df[,i] <- as.factor(df[,i])
if(is.character(df[,i]))
df[,i] <- as.factor(df[,i])
if(is.factor(df[,i]))
{
levels(df[,i]) <- c(levels(df[,i]),"NA")
df[,i][is.na(df[,i])] <- "NA"
}
}
str(df)
iaml_super_reduced <- iaml_super_reduced[iaml_super_reduced[["learner"]] == "rpart",]
str(iaml_super_reduced)
df <- as.data.frame(iaml_super_reduced)
n <- length(df)
for (i in 1:n) {
if(is.logical(df[,i]))
df[,i] <- as.factor(df[,i])
if(is.character(df[,i]))
df[,i] <- as.factor(df[,i])
if(is.factor(df[,i]))
{
levels(df[,i]) <- c(levels(df[,i]),"NA")
df[,i][is.na(df[,i])] <- "NA"
}
}
str(df)
as.factor(c("test"))
# PDP
plotPartialDependence(task)
df <- as.data.frame(iaml_super_reduced)
str(df)
as.factor(df[,2])
df[,2] <- as.factor(df[,2])
str(df)
View(df)
n <- length(df)
for (i in 1:n) {
if(is.logical(df[,i]))
df[,i] <- as.factor(df[,i])
if(is.character(df[,i]))
df[,i] <- as.factor(df[,i])
if(is.factor(df[,i]))
{
levels(df[,i]) <- c(levels(df[,i]),"NA")
df[,i][is.na(df[,i])] <- "NA"
}
}
str(df)
task = TaskRegr$new(id = "task", backend = df, target = "logloss")
# 1 parameter
plotPartialDependence(task, features = N, rug = FALSE, gridsize = 5, plotICE = FALSE)
# 1 parameter
plotPartialDependence(task, features = N, rug = FALSE, gridsize = 5, plotICE = FALSE)
plotPartialDependence(task, features = f, rug = FALSE, gridsize = 5, plotICE = FALSE)
View(df)
str(df)
# make the task more robust
po = po("imputehist") %>>% po("imputeoor") %>>% po("fixfactors", droplevels = FALSE) %>>%
po("removeconstants") %>>% po("imputesample", affect_columns = selector_type("logical"))
task = po$train(task)[[1]]
df <- task$data()
str(df)
df <- as.data.frame(iaml_super_reduced)
n <- length(df)
for (i in 1:n) {
if(is.logical(df[,i]))
df[,i] <- as.factor(df[,i])
if(is.character(df[,i]))
df[,i] <- as.factor(df[,i])
if(is.factor(df[,i]))
{
levels(df[,i]) <- c(levels(df[,i]),"NA")
df[,i][is.na(df[,i])] <- "NA"
}
}
str(df)
View(df)
task = po$train(task)[[1]]
df <- task$data()
task = po$train(task)[[1]]
df <- task$data()
# make the task more robust
po = po("imputehist") %>>% po("imputeoor") %>>% po("fixfactors", droplevels = FALSE) %>>%
po("removeconstants") %>>% po("imputesample", affect_columns = selector_type("logical"))
task = po$train(task)[[1]]
df <- task$data()
task = TaskRegr$new(id = "task", backend = df, target = "logloss")
# make the task more robust
po = po("imputehist") %>>% po("imputeoor") %>>% po("fixfactors", droplevels = FALSE) %>>%
po("removeconstants") %>>% po("imputesample", affect_columns = selector_type("logical"))
task = po$train(task)[[1]]
df <- task$data()
# PDP
plotPartialDependence(task)
str(df)
# dataset smashy_super (with NA's)
str(iaml_super_reduced)
iaml_super_reduced <- iaml_super_reduced[iaml_super_reduced[["learner"]] == "rpart",]
task = TaskRegr$new(id = "task", backend = iaml_super_reduced, target = "logloss")
# PDP
plotPartialDependence(task)
#HEATMAP
plotHeatmap(task)
#PCP
plotParallelCoordinate(task)
# importance plot
plotImportance(task)
iaml_super_reduced <- iaml_super_reduced[iaml_super_reduced[["learner"]] == "rpart", "ranger"]
View(iaml_super_reduced)
iaml_super_reduced <- readRDS("D:/Simon/Desktop/Studium/6. Semester/Bachelorarbeit/Data/iaml_super_reduced.rds")
rpartDF <- iaml_super_reduced[iaml_super_reduced[["learner"]] == "rpart",]
task = TaskRegr$new(id = "task", backend = rpartDF, target = "logloss")
# Further tests
str(iaml_super_reduced)
iaml_super_reduced <- iaml_super_reduced[iaml_super_reduced[["learner"]] == "rpart", "ranger"]
rangerRpart <- iaml_super_reduced[iaml_super_reduced[["learner"]] == c("rpart", "ranger")]
rangerRpart <- iaml_super_reduced[iaml_super_reduced[["learner"]] == c("rpart")|iaml_super_reduced[["learner"]] == c("ranger")]
iaml_super_reduced[["learner"]] == c("rpart")
iaml_super_reduced[["learner"]] == c("ranger")
iaml_super_reduced[["learner"]] == c("rpart")|iaml_super_reduced[["learner"]] == c("ranger")
rangerRpart <- iaml_super_reduced[iaml_super_reduced[["learner"]] == c("rpart")|iaml_super_reduced[["learner"]] == c("ranger")]
iaml_super_reduced[["learner"]] == c("rpart")
iaml_super_reduced[["learner"]] == c("ranger")
iaml_super_reduced[["learner"]] == c("rpart")|iaml_super_reduced[["learner"]] == c("ranger")
rangerRpart <- iaml_super_reduced[iaml_super_reduced[["learner"]] == c("rpart")|iaml_super_reduced[["learner"]] == c("ranger")]
rangerRpart <- iaml_super_reduced[iaml_super_reduced[["learner"]] == c("ranger")]
# Further tests
str(iaml_super_reduced)
rpartDF <- iaml_super_reduced[iaml_super_reduced[["learner"]] == "rpart",]
rangerRpart <- iaml_super_reduced[iaml_super_reduced[["learner"]] == c("ranger")]
rangerRpart <- iaml_super_reduced[iaml_super_reduced[["learner"]] == c("rpart")]
rangerRpart <- iaml_super_reduced[iaml_super_reduced[["learner"]] == c("rpart","ranger"),]
# only rpart
plotPartialDependence(task)
plotHeatmap(task)
str(rangerRpart)
iaml_super_reduced[,"learnerFactor"] <- factorNA1
iaml_super_reduced[,"ranger.replaceFactor"] <- factorNA2
iaml_super_reduced[,"ranger.respect.unordered.factorsFactor"] <- factorNA3
factorNA <- as.data.frame(rangerRpart)
factorNA1 <- as.factor(factorNA[,"learner"])
factorNA2 <- as.factor(factorNA[,"ranger.replace"])
factorNA3 <- as.factor(factorNA[,"ranger.respect.unordered.factors"])
rangerRpart[,"learnerFactor"] <- factorNA1
rangerRpart[,"ranger.replaceFactor"] <- factorNA2
rangerRpart[,"ranger.respect.unordered.factorsFactor"] <- factorNA3
task = TaskRegr$new(id = "task", backend = rangerRpart, target = "logloss")
str(rangerRpart)
N <- c("ranger.num.trees")
f <- c("ranger.replaceFactor")
L <- c("ranger.replace")
C <- c("learner")
NN <- c("rpart.minbucket", "glmnet.s")
FF <- c("ranger.replaceFactor","ranger.respect.unordered.factorsFactor" )
LL <- c("ranger.replace", "ranger.replace")
CC <- c("ranger.splitrule" , "xgboost.booster")
NF <- c("rpart.minbucket","ranger.respect.unordered.factorsFactor" )
NL <- c("xgboost.max_depth", "ranger.replace")
NC <- c("ranger.min.node.size", "ranger.respect.unordered.factors")
FL <- c("ranger.replaceFactor", "ranger.replace")
FC <- c("ranger.replaceFactor", "xgboost.booster")
LC <- c("ranger.replace", "xgboost.booster")
# PDP
plotPartialDependence(task)
# 1 parameter
plotPartialDependence(task, features = N, rug = FALSE, gridsize = 5, plotICE = FALSE)
plotPartialDependence(task, features = f, rug = FALSE, gridsize = 5, plotICE = FALSE)
# Further tests
str(iaml_super_reduced)
rpartDF <- iaml_super_reduced[iaml_super_reduced[["learner"]] == "rpart",]
task = TaskRegr$new(id = "task", backend = rpartDF, target = "logloss")
# only rpart
plotPartialDependence(task)
plotHeatmap(task)
plotParallelCoordinate(task)
plotImportance(task)
# ranger and rpart
rangerRpart <- iaml_super_reduced[iaml_super_reduced[["learner"]] == c("rpart","ranger"),]
factorNA <- as.data.frame(rangerRpart)
factorNA1 <- as.factor(factorNA[,"learner"])
factorNA2 <- as.factor(factorNA[,"ranger.replace"])
factorNA3 <- as.factor(factorNA[,"ranger.respect.unordered.factors"])
rangerRpart[,"learnerFactor"] <- factorNA1
rangerRpart[,"ranger.replaceFactor"] <- factorNA2
rangerRpart[,"ranger.respect.unordered.factorsFactor"] <- factorNA3
taskRangerRpart = TaskRegr$new(id = "task", backend = rangerRpart, target = "logloss")
str(rangerRpart)
N <- c("ranger.num.trees")
f <- c("ranger.replaceFactor")
L <- c("ranger.replace")
C <- c("learner")
NN <- c("rpart.minbucket", "glmnet.s")
FF <- c("ranger.replaceFactor","ranger.respect.unordered.factorsFactor" )
LL <- c("ranger.replace", "ranger.replace")
CC <- c("ranger.splitrule" , "xgboost.booster")
NF <- c("rpart.minbucket","ranger.respect.unordered.factorsFactor" )
NL <- c("xgboost.max_depth", "ranger.replace")
NC <- c("ranger.min.node.size", "ranger.respect.unordered.factors")
FL <- c("ranger.replaceFactor", "ranger.replace")
FC <- c("ranger.replaceFactor", "xgboost.booster")
LC <- c("ranger.replace", "xgboost.booster")
# PDP
plotPartialDependence(taskRangerRpart)
# 1 parameter
plotPartialDependence(taskRangerRpart, features = N, rug = FALSE, gridsize = 5, plotICE = FALSE)
plotPartialDependence(taskRangerRpart, features = f, rug = FALSE, gridsize = 5, plotICE = FALSE)
plotPartialDependence(taskRangerRpart, features = L, rug = FALSE, gridsize = 5, plotICE = FALSE)
plotPartialDependence(taskRangerRpart, features = C, rug = FALSE, gridsize = 5, plotICE = FALSE)
# 2 parameters with the same class
plotPartialDependence(taskRangerRpart, features = NN, rug = FALSE, gridsize = 5, plotICE = FALSE)
View(rangerRpart)
NN <- c("rpart.minbucket", "ranger.num.trees")
# 2 parameters with the same class
plotPartialDependence(taskRangerRpart, features = NN, rug = FALSE, gridsize = 5, plotICE = FALSE)
plotPartialDependence(taskRangerRpart, features = FF, rug = FALSE, gridsize = 5, plotICE = FALSE)
plotPartialDependence(taskRangerRpart, features = LL, rug = FALSE, gridsize = 5, plotICE = FALSE) #Fehlermeldung gewollt
plotPartialDependence(taskRangerRpart, features = CC, rug = FALSE, gridsize = 5, plotICE = FALSE)
str(rangerRpart)
CC <- c("ranger.splitrule" , "ranger.respect.unordered.factors")
plotPartialDependence(taskRangerRpart, features = CC, rug = FALSE, gridsize = 5, plotICE = FALSE)
# 2 parameters with different class
plotPartialDependence(taskRangerRpart, features = NF, rug = FALSE, gridsize = 5, plotICE = FALSE)
plotPartialDependence(taskRangerRpart, features = NL, rug = FALSE, gridsize = 5, plotICE = FALSE)
NL <- c("ranger.num.trees", "ranger.replace")
NC <- c("ranger.min.node.size", "ranger.respect.unordered.factors")
FL <- c("ranger.replaceFactor", "ranger.replace")
FC <- c("ranger.replaceFactor", "ranger.respect.unordered.factors")
LC <- c("ranger.replace", "ranger.respect.unordered.factors")
plotPartialDependence(taskRangerRpart, features = NC, rug = FALSE, gridsize = 5, plotICE = FALSE)
plotPartialDependence(taskRangerRpart, features = FL, rug = FALSE, gridsize = 5, plotICE = FALSE)
plotPartialDependence(taskRangerRpart, features = FC, rug = FALSE, gridsize = 5, plotICE = FALSE)
plotPartialDependence(taskRangerRpart, features = LC, rug = FALSE, gridsize = 5, plotICE = FALSE)
#HEATMAP
plotHeatmap(taskRangerRpart)
# 1 parameter
plotHeatmap(taskRangerRpart, features = N, rug = FALSE, gridsize = 5) #Fehler gewollt
# 2 parameters with the same class
plotHeatmap(taskRangerRpart, features = NN, rug = FALSE, gridsize = 5)
plotHeatmap(taskRangerRpart, features = FF, rug = FALSE, gridsize = 5)
plotHeatmap(taskRangerRpart, features = LL, rug = FALSE, gridsize = 5)
plotHeatmap(taskRangerRpart, features = CC, rug = FALSE, gridsize = 5)
# 2 parameters with different class
plotHeatmap(taskRangerRpart, features = NF, rug = FALSE, gridsize = 5)
plotHeatmap(taskRangerRpart, features = NL, rug = FALSE, gridsize = 5)
plotHeatmap(taskRangerRpart, features = NC, rug = FALSE, gridsize = 5)
plotHeatmap(taskRangerRpart, features = FL, rug = FALSE, gridsize = 5)
plotHeatmap(taskRangerRpart, features = FC, rug = FALSE, gridsize = 5)
plotHeatmap(taskRangerRpart, features = LC, rug = FALSE, gridsize = 5)
#PCP
plotParallelCoordinate(taskRangerRpart)
# 2 parameters with the same class
plotParallelCoordinate(taskRangerRpart, features = NN)
plotParallelCoordinate(taskRangerRpart, features = FF)
plotParallelCoordinate(taskRangerRpart, features = LL) #Fehler gewollt
plotParallelCoordinate(taskRangerRpart, features = CC)
# 2 different class parameter
plotParallelCoordinate(taskRangerRpart, features = NF)
plotParallelCoordinate(taskRangerRpart, features = NL)
plotParallelCoordinate(taskRangerRpart, features = NC)
plotParallelCoordinate(taskRangerRpart, features = FL)
plotParallelCoordinate(taskRangerRpart, features = FC)
plotParallelCoordinate(taskRangerRpart, features = LC)
# importance plot
plotImportance(taskRangerRpart)
plotImportance(taskRangerRpart, loss = "ce")
glmnet_ela <- readRDS("D:/Simon/Desktop/Studium/6. Semester/Bachelorarbeit/Data/glmnet_ela.rds")
View(glmnet_ela)
View(glmnet_ela)
#glmnet
glmnet_ela <- glmnet_ela[glmnet_ela[["dataset"]] == c("kc1"),]
Task = TaskRegr$new(id = "task", backend = rangerRpart, target = "logloss")
plotPartialDependence(task)
#glmnet
glmnet_ela <- glmnet_ela[glmnet_ela[["dataset"]] == c("kc1"),]
Task = TaskRegr$new(id = "task", backend = rangerRpart, target = "logloss")
plotPartialDependence(task)
plotHeatmap(task)
plotParallelCoordinate(task)
plotImportance(task)
plotPartialDependence(glmnet_elaTask)
glmnet_elaTask = TaskRegr$new(id = "task", backend = rangerRpart, target = "logloss")
plotPartialDependence(glmnet_elaTask)
plotHeatmap(glmnet_elaTask)
plotParallelCoordinate(glmnet_elaTask)
plotImportance(glmnet_elaTask)
iaml_glmnet_reduced <- readRDS("D:/Simon/Desktop/Studium/6. Semester/Bachelorarbeit/Data/iaml_glmnet_reduced.rds")
View(iaml_glmnet_reduced)
iaml_ranger_reduced <- readRDS("D:/Simon/Desktop/Studium/6. Semester/Bachelorarbeit/Data/iaml_ranger_reduced.rds")
View(iaml_ranger_reduced)
iaml_rpart_reduced <- readRDS("D:/Simon/Desktop/Studium/6. Semester/Bachelorarbeit/Data/iaml_rpart_reduced.rds")
View(iaml_rpart_reduced)
iaml_super_reduced <- readRDS("D:/Simon/Desktop/Studium/6. Semester/Bachelorarbeit/Data/iaml_super_reduced.rds")
# ranger_replace
ranger_replace <- iaml_super_reduced[iaml_super_reduced[["learner"]] == c("ranger_replace"),]
factorNA <- as.data.frame(ranger_replace)
factorNA1 <- as.factor(factorNA[,"learner"])
factorNA2 <- as.factor(factorNA[,"ranger.replace"])
factorNA3 <- as.factor(factorNA[,"ranger.respect.unordered.factors"])
ranger_replace[,"learnerFactor"] <- factorNA1
ranger_replace[,"ranger.replaceFactor"] <- factorNA2
ranger_replace[,"ranger.respect.unordered.factorsFactor"] <- factorNA3
taskranger_replace = TaskRegr$new(id = "task", backend = ranger_replace, target = "logloss")
str(ranger_replace)
taskranger_replace = TaskRegr$new(id = "task", backend = ranger_replace, target = "logloss")
# ranger_replace
ranger_replace <- iaml_super_reduced[iaml_super_reduced[["learner"]] == c("ranger_replace"),]
# ranger.replace
ranger.replace <- iaml_super_reduced[iaml_super_reduced[["learner"]] == c("ranger.replace"),]
iaml_super_reduced[["learner"]] == c("ranger.replace")
# ranger.replace
ranger.replace <- iaml_super_reduced[iaml_super_reduced[["ranger.replace"]] == c("true"),]
# ranger.replace
ranger.replace <- iaml_super_reduced[iaml_super_reduced[["ranger.replace"]] == c("TRUE"),]
iaml_super_reduced[["ranger.replace"]] == c("TRUE"),
iaml_super_reduced[["ranger.replace"]] == c("TRUE")
# ranger.replace
ranger.replace <- iaml_super_reduced[iaml_super_reduced[["ranger.replace"]] == c("TRUE"),]
factorNA <- as.data.frame(ranger.replace)
factorNA1 <- as.factor(factorNA[,"learner"])
factorNA2 <- as.factor(factorNA[,"ranger.replace"])
factorNA3 <- as.factor(factorNA[,"ranger.respect.unordered.factors"])
ranger.replace[,"learnerFactor"] <- factorNA1
ranger.replace[,"ranger.replaceFactor"] <- factorNA2
ranger.replace[,"ranger.respect.unordered.factorsFactor"] <- factorNA3
taskranger.replace = TaskRegr$new(id = "task", backend = ranger.replace, target = "logloss")
str(ranger.replace)
N <- c("ranger.num.trees")
f <- c("ranger.replaceFactor")
L <- c("ranger.replace")
C <- c("learner")
NN <- c("rpart.minbucket", "ranger.num.trees")
FF <- c("ranger.replaceFactor","ranger.respect.unordered.factorsFactor" )
LL <- c("ranger.replace", "ranger.replace")
CC <- c("ranger.splitrule" , "ranger.respect.unordered.factors")
NF <- c("rpart.minbucket","ranger.respect.unordered.factorsFactor" )
NL <- c("ranger.num.trees", "ranger.replace")
NC <- c("ranger.min.node.size", "ranger.respect.unordered.factors")
FL <- c("ranger.replaceFactor", "ranger.replace")
FC <- c("ranger.replaceFactor", "ranger.respect.unordered.factors")
LC <- c("ranger.replace", "ranger.respect.unordered.factors")
# PDP
plotPartialDependence(taskranger.replace)
taskranger.replace = TaskRegr$new(id = "task", backend = ranger.replace, target = "logloss")
View(ranger.replace)
# ranger.replace
ranger.replace <- iaml_super_reduced[iaml_super_reduced[["ranger.replace"]] == c("TRUE"),]
iaml_super_reduced[["ranger.replace"]] == c("TRUE"),
iaml_super_reduced[["ranger.replace"]] == c("TRUE")
View(ranger.replace)
View(iaml_super_reduced)
# ranger.replace
ranger.replace <- iaml_super_reduced[iaml_super_reduced[["ranger.replace"]] == c("TRUE"),]
factorNA <- as.data.frame(ranger.replace)
factorNA1 <- as.factor(factorNA[,"learner"])
factorNA2 <- as.factor(factorNA[,"ranger.replace"])
factorNA3 <- as.factor(factorNA[,"ranger.respect.unordered.factors"])
ranger.replace[,"learnerFactor"] <- factorNA1
ranger.replace[,"ranger.replaceFactor"] <- factorNA2
ranger.replace[,"ranger.respect.unordered.factorsFactor"] <- factorNA3
taskranger.replace = TaskRegr$new(id = "task", backend = ranger.replace, target = "logloss")
str(ranger.replace)
# PDP
plotPartialDependence(taskranger.replace)
View(ranger.replace)
# ranger.replace
ranger.replace <- iaml_super_reduced[iaml_super_reduced[["ranger.replace"]] == c("TRUE"),]
factorNA <- as.data.frame(ranger.replace)
factorNA1 <- as.factor(factorNA[,"learner"])
factorNA2 <- as.factor(factorNA[,"ranger.replace"])
factorNA3 <- as.factor(factorNA[,"ranger.respect.unordered.factors"])
ranger.replace[,"learnerFactor"] <- factorNA1
df <- ranger.replace
n <- length(df)
for (i in 1:n) {
if(index != i) {
if(is.logical(df[,i]))
df[,i] <- as.factor(df[,i])
if(is.character(df[,i]))
df[,i] <- as.factor(df[,i])
if(is.factor(df[,i]))
{
levels(df[,i]) <- c(levels(df[,i]),"NA")
df[,i][is.na(df[,i])] <- "NA"
}
}
}
str(df)
View(df)
task = TaskRegr$new(id = "task", backend = df, target = targetName)
task = TaskRegr$new(id = "task", backend = df, target = "logloss")
taskranger.replace = TaskRegr$new(id = "task", backend = ranger.replace, target = "logloss")
data <- taskranger.replace$data()
df <- taskranger.replace$data()
targetName <- taskranger.replace$target_names
targetVector <-  df[[targetName]]
index <- which(names(df) == targetName)
data <- task$data()
df <- as.data.frame(df)
n <- length(df)
for (i in 1:n) {
if(index != i) {
if(is.logical(df[,i]))
df[,i] <- as.factor(df[,i])
if(is.character(df[,i]))
df[,i] <- as.factor(df[,i])
if(is.factor(df[,i]))
{
levels(df[,i]) <- c(levels(df[,i]),"NA")
df[,i][is.na(df[,i])] <- "NA"
}
}
}
str(df)
task = TaskRegr$new(id = "task", backend = df, target = "logloss")
# PDP
plotPartialDependence(taskranger.replace)
View(df)
# ranger.replace
ranger.replace <- iaml_super_reduced[iaml_super_reduced[["ranger.replace"]] == c("TRUE"),]
factorNA <- as.data.frame(ranger.replace)
factorNA1 <- as.factor(factorNA[,"learner"])
factorNA2 <- as.factor(factorNA[,"ranger.replace"])
factorNA3 <- as.factor(factorNA[,"ranger.respect.unordered.factors"])
ranger.replace[,"learnerFactor"] <- factorNA1
ranger.replace[,"ranger.replaceFactor"] <- factorNA2
ranger.replace[,"ranger.respect.unordered.factorsFactor"] <- factorNA3
taskranger.replace = TaskRegr$new(id = "task", backend = ranger.replace, target = "logloss")
View(ranger.replace)
View(iaml_super_reduced)
# ranger.replace
ranger.replace <- iaml_super_reduced[iaml_super_reduced[["ranger.replace"]] == c("TRUE", NA),]
# ranger.replace
ranger.replace <- iaml_super_reduced[iaml_super_reduced[["ranger.replace"]] == c("TRUE", NA),]
# ranger.replace
ranger.replace <- iaml_super_reduced[iaml_super_reduced[["ranger.replace"]] == c("TRUE"),]
# ranger.replace
ranger.replace <- iaml_super_reduced[iaml_super_reduced[["ranger.replace"]] == c("TRUE", "NA"),]
# ranger.replace
ranger.replace <- iaml_super_reduced[iaml_super_reduced[["ranger.replace"]] == c("TRUE", NA),]
View(ranger.replace)
# ranger.replace
ranger.replace <- iaml_super_reduced[iaml_super_reduced[["ranger.replace"]] == c( NA),]
# ranger.replace
ranger.replace <- iaml_super_reduced[iaml_super_reduced[["ranger.replace"]] == c(NA),]
# ranger.replace
ranger.replace <- iaml_super_reduced[iaml_super_reduced[["ranger.replace"]] == is.na(),]
# ranger.replace
ranger.replace <- iaml_super_reduced[iaml_super_reduced[["ranger.replace"]] == is.na,]
# ranger.replace
ranger.replace <- iaml_super_reduced[iaml_super_reduced[["ranger.replace"]] == NA,]
View(ranger.replace)
# ranger.replace
ranger.replace <- iaml_super_reduced[iaml_super_reduced[["ranger.replace"]] == is.na(iaml_super_reduced[["ranger.replace"]]),]
factorNA <- as.data.frame(ranger.replace)
factorNA1 <- as.factor(factorNA[,"learner"])
factorNA2 <- as.factor(factorNA[,"ranger.replace"])
factorNA3 <- as.factor(factorNA[,"ranger.respect.unordered.factors"])
ranger.replace[,"learnerFactor"] <- factorNA1
ranger.replace[,"ranger.replaceFactor"] <- factorNA2
ranger.replace[,"ranger.respect.unordered.factorsFactor"] <- factorNA3
taskranger.replace = TaskRegr$new(id = "task", backend = ranger.replace, target = "logloss")
View(ranger.replace)
is.na(iaml_super_reduced[["ranger.replace"]])
iaml_super_reduced[["ranger.replace"]]
# ranger.replace
ranger.replace <- iaml_super_reduced[is.na(iaml_super_reduced[["ranger.replace"]]),]
# ranger.replace
ranger.replace <- iaml_super_reduced[is.na(iaml_super_reduced[["ranger.replace"]]) | iaml_super_reduced[iaml_super_reduced[["ranger.replace"]] == c(TRUE),] ,]
# ranger.replace
ranger.replace <- iaml_super_reduced[is.na(iaml_super_reduced[["ranger.replace"]]) | iaml_super_reduced[iaml_super_reduced[["ranger.replace"]] == TRUE,] ,]
iaml_super_reduced[iaml_super_reduced[["ranger.replace"]] == TRUE,]
iaml_super_reduced[["ranger.replace"]] == TRUE
# ranger.replace
ranger.replace <- iaml_super_reduced[is.na(iaml_super_reduced[["ranger.replace"]]) | iaml_super_reduced[["ranger.replace"]] == TRUE ,]
factorNA <- as.data.frame(ranger.replace)
factorNA1 <- as.factor(factorNA[,"learner"])
factorNA2 <- as.factor(factorNA[,"ranger.replace"])
factorNA3 <- as.factor(factorNA[,"ranger.respect.unordered.factors"])
ranger.replace[,"learnerFactor"] <- factorNA1
ranger.replace[,"ranger.replaceFactor"] <- factorNA2
ranger.replace[,"ranger.respect.unordered.factorsFactor"] <- factorNA3
taskranger.replace = TaskRegr$new(id = "task", backend = ranger.replace, target = "logloss")
N <- c("ranger.num.trees")
f <- c("ranger.replaceFactor")
L <- c("ranger.replace")
C <- c("learner")
NN <- c("rpart.minbucket", "ranger.num.trees")
FF <- c("ranger.replaceFactor","ranger.respect.unordered.factorsFactor" )
LL <- c("ranger.replace", "ranger.replace")
CC <- c("ranger.splitrule" , "ranger.respect.unordered.factors")
NF <- c("rpart.minbucket","ranger.respect.unordered.factorsFactor" )
NL <- c("ranger.num.trees", "ranger.replace")
NC <- c("ranger.min.node.size", "ranger.respect.unordered.factors")
FL <- c("ranger.replaceFactor", "ranger.replace")
FC <- c("ranger.replaceFactor", "ranger.respect.unordered.factors")
LC <- c("ranger.replace", "ranger.respect.unordered.factors")
# PDP
plotPartialDependence(taskranger.replace)
# 1 parameter
plotPartialDependence(taskranger.replace, features = N, rug = FALSE, gridsize = 5, plotICE = FALSE)
plotPartialDependence(taskranger.replace, features = f, rug = FALSE, gridsize = 5, plotICE = FALSE)
plotPartialDependence(taskranger.replace, features = L, rug = FALSE, gridsize = 5, plotICE = FALSE)
plotPartialDependence(taskranger.replace, features = C, rug = FALSE, gridsize = 5, plotICE = FALSE)
# 2 parameters with the same class
plotPartialDependence(taskranger.replace, features = NN, rug = FALSE, gridsize = 5, plotICE = FALSE)
plotPartialDependence(taskranger.replace, features = FF, rug = FALSE, gridsize = 5, plotICE = FALSE)
iaml_xgboost_reduced <- readRDS("D:/Simon/Desktop/Studium/6. Semester/Bachelorarbeit/Data/iaml_xgboost_reduced.rds")
View(iaml_xgboost_reduced)
iaml_xgboost_reduced <- readRDS("D:/Simon/Desktop/Studium/6. Semester/Bachelorarbeit/Data/iaml_xgboost_reduced.rds")
View(iaml_xgboost_reduced)

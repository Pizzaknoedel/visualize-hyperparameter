out_file = "D:/Simon/Desktop/Studium/6. Semester/Bachelorarbeit/Latex/Grafiken/Heatmap_Theory.png")
export(p, width = 700, height = 500, format = "png", scale = 2,
out_file = "D:/Simon/Desktop/Studium/6. Semester/Bachelorarbeit/Latex/Grafiken/Heatmap_Theory.png")
install.packages("webshot")
export(p, width = 700, height = 500, format = "png", scale = 2,
out_file = "D:/Simon/Desktop/Studium/6. Semester/Bachelorarbeit/Latex/Grafiken/Heatmap_Theory.png")
?export
export(p, file = "D:/Simon/Desktop/Studium/6. Semester/Bachelorarbeit/Latex/Grafiken/Heatmap_Theory.png")
export(p, file = "D:/Simon/Desktop/Studium/6. Semester/Bachelorarbeit/Latex/Grafiken/Heatmap_Theory.png")
webshot::install_phantomjs()
export(p, file = "D:/Simon/Desktop/Studium/6. Semester/Bachelorarbeit/Latex/Grafiken/Heatmap_Theory.png")
orca(p, file = "D:/Simon/Desktop/Studium/6. Semester/Bachelorarbeit/Latex/Grafiken/Heatmap_Theory.png")
kaleido(p, file = "D:/Simon/Desktop/Studium/6. Semester/Bachelorarbeit/Latex/Grafiken/Heatmap_Theory.png")
y
save_image(p, file = "D:/Simon/Desktop/Studium/6. Semester/Bachelorarbeit/Latex/Grafiken/Heatmap_Theory.png")
# Heatmap
library(kaleido)
install.packages('reticulate')
reticulate::install_miniconda()
install.packages("reticulate")
reticulate::conda_install('r-reticulate', 'python-kaleido')
reticulate::conda_install('r-reticulate', 'plotly', channel = 'plotly')
reticulate::conda_install('r-reticulate', 'plotly', channel = 'plotly')
reticulate::use_miniconda('r-reticulate')
save_image(p, file = "D:/Simon/Desktop/Studium/6. Semester/Bachelorarbeit/Latex/Grafiken/Heatmap_Theory.png")
# Heatmap
library(kaleido)
?save.image
?save_image
library(plotly)
save_image(p, file = "D:/Simon/Desktop/Studium/6. Semester/Bachelorarbeit/Latex/Grafiken/Heatmap_Theory.png")
save_image(p, file = "D:/Simon/Desktop/Studium/6. Semester/Bachelorarbeit/Latex/Grafiken/Heatmap_Theory.png",
width = 700, height = 500)
save_image(p, file = "D:/Simon/Desktop/Studium/6. Semester/Bachelorarbeit/Latex/Grafiken/2.png",
width = 700, height = 500)
save_image(p, file = "D:/Simon/Desktop/Studium/6. Semester/Bachelorarbeit/Latex/Grafiken/Heatmap_Theory.png",
width = 700, height = 500, scale = 2 )
Heatmap_Theory <- plotHeatmap(task, c("nf","alpha"), gridsize = 10, rug = TRUE)
Heatmap_Theory
Heatmap_Theory <- plotHeatmap(task, c("nf","alpha"), gridsize = 10, rug = TRUE)
library(VisHyp)
Heatmap_Theory <- plotHeatmap(task, c("nf","alpha"), gridsize = 10, rug = TRUE)
Heatmap_Theory
Heatmap_Theory <- plotHeatmap(task, c("nf","alpha"), gridsize = 10, rug = FALSE)
Heatmap_Theory
# PCP
plotParallelCoordinate_Theory <- plotParallelCoordinate(task, labelangle = 10)
plotParallelCoordinate_Theory
save_image(plotParallelCoordinate_Theory, file = "D:/Simon/Desktop/Studium/6. Semester/Bachelorarbeit/Latex/Grafiken/Heatmap_Theory.png",
width = 700, height = 500, scale = 2 )
save_image(plotParallelCoordinate_Theory, file = "D:/Simon/Desktop/Studium/6. Semester/Bachelorarbeit/Latex/Grafiken/Heatmap_Theory.png",
width = 700, height = 500, scale = 2 )
# PCP
plotParallelCoordinate_Theory <- plotParallelCoordinate(task, labelangle = 10)
plotParallelCoordinate_Theory
save_image(plotParallelCoordinate_Theory, file = "D:/Simon/Desktop/Studium/6. Semester/Bachelorarbeit/Latex/Grafiken/plotParallelCoordinate_Theory.png",
width = 700, height = 500, scale = 2 )
Heatmap_Theory <- plotHeatmap(task, c("nf","alpha"), gridsize = 10, rug = FALSE)
Heatmap_Theory
save_image(Heatmap_Theory, file = "D:/Simon/Desktop/Studium/6. Semester/Bachelorarbeit/Latex/Grafiken/Heatmap_Theory.png",
width = 700, height = 500, scale = 2 )
# PCP
plotParallelCoordinate_Theory <- plotParallelCoordinate(task, labelangle = 0)
plotParallelCoordinate_Theory
save_image(plotParallelCoordinate_Theory, file = "D:/Simon/Desktop/Studium/6. Semester/Bachelorarbeit/Latex/Grafiken/plotParallelCoordinate_Theory.png",
width = 700, height = 500, scale = 2 )
View(iam_glmnet)
View(testData)
# PDP
PDP_Theory <- plotPartialDependence(task, "mmce", plotICE = FALSE)
plotParallelCoordinate_Theory
PDP_Theory
# PDP
PDP_Theory <- plotPartialDependence(task, "rammodel", plotICE = FALSE)
PDP_Theory
save_image(PDP_Theory, file = "D:/Simon/Desktop/Studium/6. Semester/Bachelorarbeit/Latex/Grafiken/PDP_Theory.png",
width = 700, height = 500, scale = 2 )
?save_image
subplot(PDP_Theory, plotParallelCoordinate_Theory)
subplot(PDP_Theory, plotParallelCoordinate_Theory,nrows = 2)
?subplot
subplot(Heatmap_Theory, plotParallelCoordinate_Theory,nrows = 2)
subplot(Heatmap_Theory, PDP_Theory,nrows = 2)
# Importance Plot
Importance_Theory <- plotImportance(task)
Importance_Theory
save_image(Importance_Theory, file = "D:/Simon/Desktop/Studium/6. Semester/Bachelorarbeit/Latex/Grafiken/Importance_Theory.png",
width = 700, height = 500, scale = 2 )
devtools::load_all(".")
# Importance Plot
Importance_Theory <- plotImportance(task)
library(VisHyp)
# Importance Plot
Importance_Theory <- plotImportance(task)
Importance_Theory
library(VisHyp)
# Importance Plot
Importance_Theory <- plotImportance(task)
Importance_Theory
devtools::load_all(".")
library(VisHyp)
# Importance Plot
Importance_Theory <- plotImportance(task)
Importance_Theory
Importance_Theory
devtools::load_all(".")
library(VisHyp)
# Importance Plot
Importance_Theory <- plotImportance(task)
Importance_Theory
devtools::load_all(".")
library(VisHyp)
warnings()
# Importance Plot
Importance_Theory <- plotImportance(task)
Importance_Theory
devtools::load_all(".")
# Importance Plot
Importance_Theory <- plotImportance(task)
Importance_Theory
library(VisHyp)
# Importance Plot
Importance_Theory <- plotImportance(task)
Importance_Theory
devtools::load_all(".")
library(VisHyp)
# Importance Plot
Importance_Theory <- plotImportance(task)
Importance_Theory
devtools::load_all(".")
library(VisHyp)
# Importance Plot
Importance_Theory <- plotImportance(task)
Importance_Theory
devtools::load_all(".")
library(VisHyp)
# Importance Plot
Importance_Theory <- plotImportance(task)
Importance_Theory
devtools::load_all(".")
library(VisHyp)
# Importance Plot
Importance_Theory <- plotImportance(task)
Importance_Theory
devtools::load_all(".")
library(VisHyp)
# Importance Plot
Importance_Theory <- plotImportance(task)
Importance_Theory
save_image(Importance_Theory, file = "D:/Simon/Desktop/Studium/6. Semester/Bachelorarbeit/Latex/Grafiken/Importance_Theory.png",
width = 700, height = 500, scale = 2 )
# ICE plot
ICE_Theory <- plotPartialDependence(task, "rammodel", plotICE = FALSE)
ICE_Theory
save_image(ICE_Theory, file = "D:/Simon/Desktop/Studium/6. Semester/Bachelorarbeit/Latex/Grafiken/ICE_Theory.png",
width = 700, height = 500, scale = 2 )
library(VisHyp)
data <- read_csv("D:/Simon/Desktop/Studium/6. Semester/Bachelorarbeit/Data/data/iaml_glmnet/data.csv")
library(VisHyp)
library(mlr3)
library(plotly)
library(patchwork)
library(ggpubr)
library(rstudioapi)
library(mlr3pipelines)
data <- read_csv("D:/Simon/Desktop/Studium/6. Semester/Bachelorarbeit/Data/data/iaml_glmnet/data.csv")
str(data)
summary(as.factor(data$task_id))
library(readr)
data <- read_csv("D:/Simon/Desktop/Studium/6. Semester/Bachelorarbeit/Data/data/iaml_glmnet/data.csv")
View(data)
str(data)
summary(as.factor(data$task_id))
testData <- data[data$task_id == 1489,]
testData <- testData[, names(testData) %in% c("f1", "rammodel", "ias", "mmce", "alpha", "nf", "logloss")]
task = TaskRegr$new(id = "task_glmnet", backend = testData, target = "logloss")
# PDP
PDP_Theory <- plotPartialDependence(task, "rammodel", plotICE = FALSE)
PDP_Theory
library(VisHyp)
launchVisHyp
library(VisHyp)
launchVisHyp()
getwd()
system.file("VisHyp", package = "VisHyp")
system.file("inst", package = "VisHyp")
system.file("R", package = "VisHyp")
system.file("man", package = "VisHyp")
library(VisHyp)
launchVisHyp()
system.file("VisHypShiny, package = "VisHyp")
system.file("VisHypShiny", package = "VisHyp")
library(VisHyp)
launchVisHyp()
library(VisHyp)
launchVisHyp()
appDir
appDir <- system.file("VisHypShiny", package = "VisHyp")
appDir
system.file("inst", package = "VisHyp")
getwd()
setwd("D:/Simon/Desktop/Studium/6. Semester/Bachelorarbeit/package_VisHyp/inst/VisHypShiny")
library(VisHyp)
launchVisHyp()
library(VisHyp)
launchVisHyp()
library(VisHyp)
launchVisHyp()
library(VisHyp)
launchVisHyp()
appDir <- system.file("VisHypShiny", package = "VisHyp")
appDir
list.files(path = "./server", pattern = "*.R")
list.files(path = "", pattern = "*.R")
getwd()
list.files(path = getwd(), pattern = "*.R")
list.files()
server_files <- list.files(path = getwd(), pattern = "*.R")
server_files = paste0("", server_files)
server_files
for (i in seq_along(server_files)) {
source(server_files[i], local = TRUE)
}
seq_along(server_files)
server_files
# server_files <- list.files(path ="./" ,pattern = "*.R")
# server_files <- c(server_files, list.files(path ="./" ,pattern = "*.css"))
# server_files <- paste0("", server_files[c(2,3,4,5,6,7)])
server_files = list.files(pattern = "*.R")
server_files = paste0("", server_files)
seq_along(server_files)
for (i in seq_along(server_files)) {
source(server_files[i], local = TRUE)
}
seq_along(server_files)
# server_files <- list.files(path ="./" ,pattern = "*.R")
# server_files <- c(server_files, list.files(path ="./" ,pattern = "*.css"))
# server_files <- paste0("", server_files[c(2,3,4,5,6,7)])
server_files = list.files(pattern = "*.R")
server_files = paste0("", server_files)
for (i in seq_along(server_files-1)) {
source(server_files[i+1], local = TRUE)
}
seq_along(server_files)
seq_along(server_files)-1
seq_along(server_files-1)
server_files
server_files[-1]
for (i in seq_along(server_files[-1])) {
source(server_files[i+1], local = TRUE)
}
library(VisHyp)
launchVisHyp()
launchVisHyp()
library(VisHyp)
library(VisHyp)
launchVisHyp()
library(VisHyp)
launchVisHyp()
library(VisHyp)
launchVisHyp()
launchVisHyp()
launchVisHyp()
devtools::load_all("D:/Simon/Desktop/Studium/6. Semester/Bachelorarbeit/package_VisHyp")
launchVisHyp()
launchVisHyp()
launchVisHyp()
library(VisHyp)
launchVisHyp()
launchVisHyp()
launchVisHyp()
server_files
server_files[!server_files %in% c("app.R")]
server_files
launchVisHyp()
launchVisHyp()
launchVisHyp()
launchVisHyp()
runApp()
library(VisHyp)
shiny::runApp('inst/VisHypShiny')
iaml_glmnet_reduced <- readRDS("D:/Simon/Desktop/Studium/6. Semester/Bachelorarbeit/Data/data/iaml_glmnet_reduced.rds")
View(iaml_glmnet_reduced)
str(iaml_glmnet_reduced)
library(VisHyp)
runApp('inst/VisHypShiny')
library(VisHyp)
runApp('inst/VisHypShiny')
library(VisHyp)
runApp('inst/VisHypShiny')
str(iaml_glmnet_reduced$task_id)
runApp('inst/VisHypShiny')
!is.null(NULL)
is.numeric(iaml_glmnet_reduced$task_id)
iaml_glmnet_reduced[,"task_id"]
test <- iaml_glmnet_reduced[,"task_id"]
is.numeric(test)
str(test)
test2 <- as.vector(test)
is.numeric(test2)
test2
test2 <- as.data.frame(test)
is.numeric(test2)
test2 <- test[[1]]
is.numeric(test2)
test[[,1]]
test[test$task_id][[1]]
test[test$task_id][[,1]]
test[test$task_id][]
library(VisHyp)
runApp('inst/VisHypShiny')
test[test$task_id][[1]]
test[test$task_id]
iaml_glmnet_reduced[iaml_glmnet_reduced$task_id][[1]]
iaml_glmnet_reduced[iaml_glmnet_reduced$task_id][[,1]]
iaml_glmnet_reduced[iaml_glmnet_reduced$task_id]
iaml_glmnet_reduced["task_id"]
iaml_glmnet_reduced["task_id"][[1]]
library(VisHyp)
runApp('inst/VisHypShiny')
runApp('inst/VisHypShiny')
iaml_super_reduced <- readRDS("D:/Simon/Desktop/Studium/6. Semester/Bachelorarbeit/Data/data/iaml_super_reduced.rds")
View(iaml_super_reduced)
task = TaskRegr$new(id = "task_glmnet", backend = iaml_super_reduced, target = "logloss")
learner = lrn("regr.ranger")
plotPartialDependence(task)
plotImportance(task2)
plotImportance(task)
View(iaml_super_reduced)
task$data()
library(VisHyp)
task$data()
plotPartialDependence(task)
po = po("imputehist") %>>% po("fixfactors") %>>% po("imputeoor")  %>>% po("removeconstants")
task = po$train(task)[[1]]
task_ext$missings()
task$missings()
po = po("imputehist") %>>% po("fixfactors") %>>% po("imputeoor") %>>% po("imputeoor", affect_columns = selector_type("logical")) %>>% po("removeconstants")
po = po("imputehist") %>>% po("fixfactors") %>>%  po("imputeoor", affect_columns = selector_type("logical")) %>>% po("removeconstants")
task = po$train(task)[[1]]
task$missings()
task = TaskRegr$new(id = "task_glmnet", backend = iaml_super_reduced, target = "logloss")
task$data()
task$missings()
po = po("imputehist") %>>% po("fixfactors") %>>%  po("imputeoor", affect_columns = selector_invert(selector_type(c("factor", "ordered", "character")))) %>>% po("removeconstants")
task = po$train(task)[[1]]
task$missings()
# set seed for reproducibility
str(iaml_super_reduced)
# set seed for reproducibility
mlr_reflections$task_feature_types
?selector_invert
po = po("imputehist") %>>% po("fixfactors") %>>%  po("imputeoor", affect_columns = selector_type(c("factor", "ordered", "character"))) %>>% po("removeconstants")
task = po$train(task)[[1]]
task$missings()
po = po("imputehist") %>>% po("fixfactors") %>>%  po("imputeoor", affect_columns = selector_type(c("factor", "ordered", "character", "logical"))) %>>% po("removeconstants")
task = po$train(task)[[1]]
task$missings()
# set seed for reproducibility
mlr_reflections$task_feature_types
str(iaml_super_reduced)
task = TaskRegr$new(id = "task_glmnet", backend = iaml_super_reduced, target = "logloss")
task$data()
task$missings()
po = po("imputehist") %>>% po("fixfactors") %>>%  po("imputeoor", affect_columns = selector_type(c("factor", "ordered", "character", "logical"))) %>>% po("removeconstants")
task = po$train(task)[[1]]
task$missings()
po = po("imputehist") %>>% po("fixfactors") %>>%  po("imputeoor", affect_columns = selector_type(c("logical","factor", "ordered", "character"))) %>>% po("removeconstants")
task = po$train(task)[[1]]
task$missings()
# set seed for reproducibility
mlr_reflections$task_feature_types
str(iaml_super_reduced)
task = TaskRegr$new(id = "task_glmnet", backend = iaml_super_reduced, target = "logloss")
task$data()
task$missings()
po = po("imputehist") %>>% po("fixfactors") %>>%  po("imputeoor", affect_columns = selector_type(c("logical"))) %>>% po("removeconstants")
task = po$train(task)[[1]]
task$missings()
# set seed for reproducibility
mlr_reflections$task_feature_types
str(iaml_super_reduced)
task$missings()
po = po("imputehist") %>>% po("fixfactors") %>>%  po("imputeoor", affect_columns = selector_type(c("log"))) %>>% po("removeconstants")
po = po("imputehist") %>>% po("fixfactors") %>>%  po("imputeoor", affect_columns = selector_type(c("logical"))) %>>% po("removeconstants")
task = po$train(task)[[1]]
task$missings()
po = po("imputehist") %>>% po("fixfactors") %>>%  po("imputeoor", affect_columns = selector_all() %>>% po("removeconstants")
po = po("imputehist") %>>% po("fixfactors") %>>%  po("imputeoor", affect_columns = selector_all()) %>>% po("removeconstants")
task = po$train(task)[[1]]
task$missings()
po = po("imputehist") %>>% po("fixfactors") %>>%  po("imputeoor", affect_columns = selector_all()) %>>% po("removeconstants")
task = po$train(task)[[1]]
task$missings()
task$data()
# set seed for reproducibility
mlr_reflections$task_feature_types
str(iaml_super_reduced)
task = TaskRegr$new(id = "task_glmnet", backend = iaml_super_reduced, target = "logloss")
task$data()
task$missings()
po = po("imputehist") %>>% po("fixfactors") %>>%  po("imputeoor", affect_columns = selector_all()) %>>% po("removeconstants")
task = po$train(task)[[1]]
task$missings()
task$data()
po = po("imputehist") %>>%  po("imputeoor" %>>% po("fixfactors") %>>% po("removeconstants")
po = po("imputehist") %>>%  po("imputeoor") %>>% po("fixfactors") %>>% po("removeconstants")
task = po$train(task)[[1]]
task$missings()
task$data()
task$missings()
po = po("imputehist") %>>%  po("imputeoor") %>>% po("fixfactors") %>>% po("removeconstants")
task = po$train(task)[[1]]
task$missings()
task$data()
po = po("imputehist") %>>%  po("imputeoor") %>>% po("fixfactors", droplevels) %>>% po("removeconstants")
task = po$train(task)[[1]]
# set seed for reproducibility
mlr_reflections$task_feature_types
str(iaml_super_reduced)
task = TaskRegr$new(id = "task_glmnet", backend = iaml_super_reduced, target = "logloss")
task$data()
task$missings()
po = po("imputehist") %>>%  po("imputeoor") %>>% po("fixfactors", droplevels = TRUE) %>>% po("removeconstants")
task = po$train(task)[[1]]
task$missings()
task$data()
po = po("imputehist") %>>%  po("imputeoor") %>>% po("fixfactors", droplevels = FALSE) %>>% po("removeconstants")
task = po$train(task)[[1]]
task$missings()
task$data()
po = po("imputehist") %>>%  po("imputeoor") %>>% po("fixfactors", droplevels = FALSE) %>>% po("removeconstants") %>>% po("imputesample", selector_type("logical"))
po = po("imputehist") %>>%  po("imputeoor") %>>% po("fixfactors", droplevels = FALSE) %>>% po("removeconstants") %>>% po("imputesample", affect_columns = selector_type("logcal"))
po = po("imputehist") %>>%  po("imputeoor") %>>% po("fixfactors", droplevels = FALSE) %>>% po("removeconstants") %>>% po("imputesample", affect_columns = selector_type("logical"))
task = po$train(task)[[1]]
task$missings()
shiny::runApp('inst/VisHypShiny')
runApp('inst/VisHypShiny')
library(VisHyp)
runApp()
smashy_super <- readRDS("D:/Simon/Desktop/Studium/6. Semester/Bachelorarbeit/package_VisHyp/data/smashy_super.rds")
View(smashy_super)
library(VisHyp)
smashy_super <- readRDS("D:/Simon/Desktop/Studium/6. Semester/Bachelorarbeit/package_VisHyp/data/smashy_super.rds")
setwd("D:/Simon/Desktop/Studium/6. Semester/Bachelorarbeit/package_VisHyp/data")
save(smashy_super, file = "smashy_super.RData")
save(smashy_super, file = "smashy_super.rda")
library(VisHyp)
runApp('D:/Simon/Desktop/Studium/6. Semester/Bachelorarbeit/package_VisHyp/inst/VisHypShiny')
library(VisHyp)
runApp('D:/Simon/Desktop/Studium/6. Semester/Bachelorarbeit/package_VisHyp/inst/VisHypShiny')
library(VisHyp)
runApp()
load("D:/Simon/Desktop/Studium/6. Semester/Bachelorarbeit/package_VisHyp/data/smashy_super.rda")
smashy_super[,"budget_log_step"][[1]]
is.numeric(smashy_super[,"budget_log_step"][[1]])
test <- budget_log_step
test <- "budget_log_step"
is.numeric(smashy_super[,test][[1]])
library(VisHyp)
runApp()
min(1,2,3,4)
min("1","2","3","4")
2 > "1"
("1","2","3","4")[2]
("1","2","3","4")[2]
c("1","2","3","4")[2]
library(VisHyp)
runApp()
?checkboxGroupInput
runApp()
runApp()
runApp()
runApp()
runApp()
library(VisHyp)
?VisHyp
?ggplot2
library(VisHyp)
?VisHyp
?VisHyp
library(VisHyp)
?VisHyp
library(VisHyp)
?VisHyp
library(VisHyp)
?VisHyp
usethis::use_data_raw()
get_exclude_patterns()
usethis::use_build_ignore("data-raw")
devtools::load_all(".")
usethis::use_build_ignore("Analyses")
library(mlr3)
data(glmnet_ela)
task_glmnet_ela = TaskRegr$new(id = "task_glmnet", backend = glmnet_ela, target = "logloss")
plotImportance(task_glmnet_ela)
plotPartialDependence(task_glmnet_ela)
plotHeatmap(task_glmnet_ela)
library(VisHyp)
plotHeatmap(task_glmnet_ela)
plotImportance(task_glmnet_ela)
learner = lrn("regr.ranger", num.trees = 100)
devtools::load_all(".")
library(VisHyp)
library(VisHyp)
warnings()
plotImportance(task_glmnet_ela)
library(mlr3)
data(glmnet_ela)
task_glmnet_ela = TaskRegr$new(id = "task_glmnet", backend = glmnet_ela, target = "logloss")
plotImportance(task_glmnet_ela)
library(VisHyp)
